swagger: '2.0'

info:
  title: ServiceUser API
  description: Allows you to manage service users in the platform.
  version: "1.0"

basePath: /
produces:
- application/json
consumes:
- application/json

paths:
  '/services':
    get:
      summary: list service users
      description: Returns a list of all registered service users.
      tags:
      - Service Users
      security:
      - oauth2:
        - uid
        - services_write
      # TODO optional query parameter to filter by prefix?
      responses:
        200:
          description: list of service users
          schema:
            type: array
            items:
              schema:
                type: object
                properties:
                  id:
                    type: string
                required:
                - id
        default:
          $ref: '#/responses/Error'

  '/services/{service_id}':
    get:
      summary: read service user
      description: Shows a more detailed view on one service user.
      tags:
      - Service Users
      security:
      - oauth2:
        - uid
        - services_read
      parameters:
      - $ref: '#/parameters/ServiceID'
      responses:
        200:
          description: detailed service user information
          schema:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
            required:
            - id
            - name
        404:
          description: service user could not be found
          schema:
            $ref: '#/definitions/Error'
        default:
          $ref: '#/responses/Error'

    put:
      summary: create or update service user
      description: |
        Creates a new service user or updates an existing service user in the platform.

        The given *client_config* specifies in which realms, client configurations should exist and which scopes can be
        asked by a client in a realm. Not specified realms should not contain a client configuration. All clients have
        to have the same ID that gets returned once.
      tags:
      - Service Users
      security:
      - oauth2:
        - uid
        - services_write
      parameters:
      - $ref: '#/parameters/ServiceID'
      - name: service
        in: body
        description: service user or updated new data
        required: true
        schema:
          type: object
          properties:
            # TODO information already in path, this is redundant, remove?
            id:
              description: id of the service, NOTE that it must match the path
              type: string
            name:
              description: a human readable name of the service
              type: string
            owner:
              description: the id of the team owning the service
              type: string
            client_config:
              description: OAuth client configuration relevant information
              type: object
              properties:
                redirect_urls:
                  description: list of whitelisted redirect URLs configured in each realm's configuration
                  type: array
                  items: string
                scopes:
                  description: list of realm specific client configurations
                  type: array
                  items: object
                  schema:
                    properties:
                      realm:
                        description: the realm, in which to create a client configuration
                        type: string
                      scopes:
                        description: the scopes, that should be available in this realm's client configuration
                        type: array
                        items: string
                  required:
                  - realm
                  - scopes
              required:
              - redirect_urls
              - scopes
            user_config:
              description: configuration about the service' user
              type: object
              schema:
                properties:
                  scopes:
                    description: all scopes that the service should have
                    type: array
                    items: string
              required:
              - scopes
          required:
          - id
          - owner
          - client_config
          - user_config
          example:
            id: pierone
            name: Pier One
            owner: stups
            client_config:
              redirect_urls:
              - https://pierone.example.com/
              scopes:
                - realm: employee
                  scopes:
                  - userinfo
                - realm: customer
                  scopes:
                  - userinfo
            user_config:
              scopes:
              - read_all
      responses:
        200:
          $ref: '#/responses/Success'
        default:
          $ref: '#/responses/Error'

    delete:
      summary: delete service user
      description: Deletes a service user in the platform with all its client configurations.
      tags:
      - Service Users
      security:
      - oauth2:
        - uid
        - services_write
      parameters:
      - $ref: '#/parameters/ServiceID'
      responses:
        200:
          $ref: '#/responses/Success'
        default:
          $ref: '#/responses/Error'

  '/services/{service_id}/password':
    post:
      summary: generate new password
      description: |
        Generates a new password for a service user. This password will be active immidiatly in addition to the old
        password. The given transaction ID must be used in the PUT request to remove the old password.
      tags:
      - Password Rotation
      security:
      - oauth2:
        - uid
        - services_write
      parameters:
      - $ref: '#/parameters/ServiceID'
      responses:
        200:
          description: password was generated
          schema:
            type: object
            properties:
              txid:
                type: string
                description: the transaction ID
              password:
                type: string
                description: the password
            required:
            - txid
            - password
        default:
          $ref: '#/responses/Error'

    put:
      summary: commit generated password
      description: |
        Commits the generated password that is connected with the given transaction ID and deletes all old
        ones after a grace period of X minutes.
      tags:
      - Password Rotation
      security:
      - oauth2:
        - uid
        - services_write
      parameters:
      - $ref: '#/parameters/ServiceID'
      - name: transaction
        in: body
        required: true
        schema:
          type: object
          properties:
            txid:
              type: string
              description: the transaction ID
          required:
          - txid
      responses:
        200:
          $ref: '#/responses/Success'
        default:
          $ref: '#/responses/Error'

  '/services/{service_id}/client':
    post:
      summary: generate new client secret
      description: |
        Generates a new client secret for a service user's client configurations.

        In order to create a new secret, one has to create a new configuration, resulting in a new client ID, that will
        also be returned. The new client will be active in parallel. Use the PUT request to delete all other clients.
      tags:
      - Client Rotation
      security:
      - oauth2:
        - uid
        - services_write
      parameters:
      - $ref: '#/parameters/ServiceID'
      - $ref: '#/parameters/ClientID'
      responses:
        200:
          description: a new client id and secret was created
          schema:
            properties:
              client_id:
                type: string
                description: the new client ID
              client_secret:
                type: string
                description: the new client secret
            required:
            - client_id
            - client_secret
        default:
          $ref: '#/responses/Error'

    put:
      summary: commit new client configuration
      description: Commits a generated client configuration and deletes all others.
      tags:
      - Client Rotation
      security:
      - oauth2:
        - uid
        - services_write
      parameters:
      - $ref: '#/parameters/ServiceID'
      - $ref: '#/parameters/ClientID'
      responses:
        200:
          $ref: '#/responses/Success'
        default:
          $ref: '#/responses/Error'

parameters:
  ServiceID:
    name: service_id
    in: path
    type: string
    description: a service user's ID
    required: true

  ClientID:
    name: client_id
    in: body
    schema:
      type: object
      properties:
        # TODO redundant information, already given in path, remove?
        id:
          type: string
          description: service user's ID
        client_id:
          type: string
          description: the client id
      required:
      - id
      - client_id

responses:
  Success:
    description: everything ok
    schema:
      $ref: '#/definitions/Success'

  Error:
    description: an error occured
    schema:
      $ref: '#/definitions/Error'

definitions:
  Success:
    properties:
      # TODO redundant, this is in the HTTP status code anyways, remove?
      code:
        type: integer
        description: HTTP Status code
      message:
        type: string
        description: descriptive message
      # TODO difference of message and reason? remove?
      reason:
        type: string
        description: HTTP Status message

  Error:
    description: NOTE, either "error" or "message" and "code" and "reason" is set...
    properties:
      error:
        type: string
        description: Small human-readable error message
      # TODO redundant, this is in the HTTP status code anyways, remove?
      code:
        type: integer
        description: HTTP status code
      message:
        type: string
        description: Small human-readable error message
      # TODO difference of message and reason? remove?
      reason:
        type: string
        description: human readable HTTP status code

securityDefinitions:
  oauth2:
    type: oauth2
    description: OAuth 2.0 access control.
    flow: implicit
    authorizationUrl: none
    scopes:
      uid: User Identitiy to match write access to "own" users
      services_write: Grants write access to service user information.
